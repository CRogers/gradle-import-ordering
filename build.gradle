import org.apache.commons.io.IOUtils

plugins {
    id 'org.inferred.processors' version '1.0'
    id 'com.gradle.plugin-publish' version '0.9.1'
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'

version = gitDescribe()
group = 'com.github.crogers'

String gitDescribe() {
    Process process = new ProcessBuilder()
        .command("git", "describe", "--dirty", "--tags")
        .start()

    process.waitFor()

    if (process.exitValue() != 0) {
        String stderr = IOUtils.toString(process.getErrorStream())
        throw new RuntimeException("Failed run git describe: " + stderr);
    }

    return IOUtils.toString(process.getInputStream()).trim()
}

repositories {
    mavenCentral()
}

configurations {
    common
}

dependencies {
    compile 'com.google.guava:guava:18.0'
    compile gradleApi()

    processor 'com.google.auto.value:auto-value:1.1'

    testCompile files('libs/intellij-codestyle.jar')
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.xmlmatchers:xml-matchers:1.0-RC1'
    testCompile 'jaxen:jaxen:1.1.6'
    testCompile gradleTestKit()
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

pluginBundle {
    website = 'https://github.com/CRogers/gradle-import-styling'
    vcsUrl = 'https://github.com/CRogers/gradle-import-styling'
    description = 'Specify your import ordering style in gradle to set them in IntelliJ'
    tags = ['configuration', 'import-ordering', 'intellij']

    plugins {
        importStylePlugin {
            id = 'com.github.crogers.import-style'
            displayName = 'Gradle Import Style Plugin'
        }
    }
}
